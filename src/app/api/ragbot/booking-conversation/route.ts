// src/app/api/ragbot/booking-conversation/route.ts
import { NextRequest, NextResponse } from 'next/server';
import connectDB from '@/lib/db';
import mongoose from 'mongoose';

// Booking conversation state schema
const BookingConversationSchema = new mongoose.Schema({
  sessionId: { type: String, required: true },
  userId: { type: String, default: null },
  currentStep: { type: String, default: 'start' },
  collectedData: {
    department: { type: String, default: '' },
    service: { type: String, default: '' },
    agentType: { type: String, default: '' },
    preferredDate: { type: String, default: '' },
    preferredTime: { type: String, default: '' },
    additionalNotes: { type: String, default: '' }
  },
  conversationHistory: [{ 
    message: String, 
    response: String, 
    timestamp: { type: Date, default: Date.now } 
  }],
  createdAt: { type: Date, default: Date.now }
});

// Add TTL index to auto-delete after 24 hours
BookingConversationSchema.index({ createdAt: 1 }, { expireAfterSeconds: 86400 });

const BookingConversation = mongoose.models.BookingConversation || 
  mongoose.model('BookingConversation', BookingConversationSchema);

interface BookingStep {
  step: string;
  question: string;
  nextStep: string;
  dataField: keyof BookingConversationState['collectedData'];
}

interface BookingConversationState {
  sessionId: string;
  userId: string | null;
  currentStep: string;
  collectedData: {
    department: string;
    service: string;
    agentType: string;
    preferredDate: string;
    preferredTime: string;
    additionalNotes: string;
  };
  conversationHistory: Array<{
    message: string;
    response: string;
    timestamp: Date;
  }>;
}

const bookingSteps: Record<string, BookingStep> = {
  start: {
    step: 'start',
    question: "I'd be happy to help you book an appointment! First, which government department do you need assistance with? (e.g., Immigration, Business Registration, Health Services, Education, etc.)",
    nextStep: 'department',
    dataField: 'department'
  },
  department: {
    step: 'department',
    question: "Great! Now, what specific service do you need from this department? (e.g., passport renewal, license application, certificate request, etc.)",
    nextStep: 'service',
    dataField: 'service'
  },
  service: {
    step: 'service',
    question: "Perfect! What type of government official would you like to meet with? (e.g., Senior Officer, Customer Service Agent, Technical Specialist, etc.)",
    nextStep: 'agentType',
    dataField: 'agentType'
  },
  agentType: {
    step: 'agentType',
    question: "Excellent! What's your preferred date for the appointment? (Please provide in YYYY-MM-DD format or describe like 'next Monday', 'this Friday', etc.)",
    nextStep: 'preferredDate',
    dataField: 'preferredDate'
  },
  preferredDate: {
    step: 'preferredDate',
    question: "Got it! What time would work best for you? (e.g., 9:00 AM, 2:00 PM, morning, afternoon, etc.)",
    nextStep: 'preferredTime',
    dataField: 'preferredTime'
  },
  preferredTime: {
    step: 'preferredTime',
    question: "Almost done! Is there anything specific you'd like to mention or any additional requirements for your appointment? (Optional - you can say 'none' or provide any special notes)",
    nextStep: 'additionalNotes',
    dataField: 'additionalNotes'
  },
  additionalNotes: {
    step: 'additionalNotes',
    question: "Perfect! I've collected all your information. You can now proceed to complete your booking by clicking the 'Open Booking Form' button that will appear below. Your information has been saved and will be automatically filled in the form.",
    nextStep: 'complete',
    dataField: 'additionalNotes'
  }
};

const translations = {
  en: {
    steps: bookingSteps,
    complete: "Perfect! I've collected all your booking information:\n\nЁЯУЛ **Booking Summary:**\nтАв Department: {department}\nтАв Service: {service}\nтАв Agent Type: {agentType}\nтАв Preferred Date: {preferredDate}\nтАв Preferred Time: {preferredTime}\nтАв Additional Notes: {additionalNotes}\n\nтЬЕ You can now click the **'Open Booking Form'** button below to complete your appointment booking. All your information will be automatically filled in!",
    authRequired: "To save your booking information and proceed, you'll need to log in to your account. Please click the 'Login to Continue' button below.",
    error: "I encountered an error processing your booking request. Please try again."
  },
  si: {
    steps: {
      start: {
        step: 'start',
        question: "р╢Фр╢╢р╢Ьр╖Ъ р╖Др╢╕р╖Фр╖Ар╖Ур╢╕ р╖Ар╖Щр╢▒р╖Кр╢Ър╢╗р╖Ар╖Ур╢╕р╢з р╢╕р╢╕ р╖Гр╢нр╖Фр╢зр╖Фр╢║р╖Т! р╢╕р╖Фр╢╜р╖Тр╢▒р╖Кр╢╕, р╢Фр╢╢р╢з р╢Ър╖Фр╢╕р╢▒ р╢╗р╢вр╢║р╖Ъ р╢пр╖Щр╢┤р╖Пр╢╗р╖Кр╢нр╢╕р╖Ър╢▒р╖Кр╢нр╖Фр╖Ар╖Ъ р╖Гр╖Др╖Пр╢║ р╢Ер╖Ар╖Бр╖КтАНр╢║р╢п? (р╢Лр╢пр╖П: р╢Ьр╖Тр╢лр╖Фр╢╕р╖Кр╢Ър╢╗р╢л, р╖Ар╖КтАНр╢║р╖Пр╢┤р╖Пр╢╗ р╢╜р╖Тр╢║р╖Пр╢┤р╢пр╖Тр╢Вр╢ар╖Тр╢║, р╖Гр╖Юр╢Ыр╖КтАНр╢║ р╖Гр╖Ър╖Ар╖П, р╢Ер╢░р╖КтАНр╢║р╖Пр╢┤р╢▒р╢║)",
        nextStep: 'department',
        dataField: 'department'
      },
      department: {
        step: 'department',
        question: "р╢Ьр╖Ьр╢йр╢Ър╖К р╖Др╖Ьр╢│р╢║р╖Т! р╢пр╖Рр╢▒р╖К, р╢Фр╢╢р╢з р╢╕р╖Щр╢╕ р╢пр╖Щр╢┤р╖Пр╢╗р╖Кр╢нр╢╕р╖Ър╢▒р╖Кр╢нр╖Фр╖Ар╖Щр╢▒р╖К р╢Ър╖Фр╢╕р╢▒ р╢▒р╖Тр╖Бр╖Кр╢ар╖Тр╢н р╖Гр╖Ър╖Ар╖Пр╖А р╢Ер╖Ар╖Бр╖КтАНр╢║р╢п? (р╢Лр╢пр╖П: р╖Ар╖Тр╢пр╖Ър╖Б р╢Ьр╢╕р╢▒р╖К р╢╢р╢╜р╢┤р╢нр╖КтАНр╢╗ р╢Ер╢╜р╖Фр╢нр╖К р╢Ър╖Тр╢╗р╖Ур╢╕, р╢╢р╢╜р╢┤р╢нр╖КтАНр╢╗ р╢Ер╢║р╢пр╖Фр╢╕р╖К, р╖Гр╖Др╢нр╖Тр╢Ъ р╢Йр╢╜р╖Кр╢╜р╖Ур╢╕)",
        nextStep: 'service',
        dataField: 'service'
      },
      service: {
        step: 'service',
        question: "р╢┤р╢╗р╖Тр╢┤р╖Цр╢╗р╖Кр╢лр╢║р╖Т! р╢Фр╢╢р╢з р╢Ър╖Фр╢╕р╢▒ р╖Ар╢╗р╖Кр╢Ьр╢║р╖Ъ р╢╗р╢вр╢║р╖Ъ р╢▒р╖Тр╢╜р╢░р╖Пр╢╗р╖Тр╢║р╖Щр╢Ър╖Ф р╖Др╢╕р╖Фр╖Ар╖Ур╢╕р╢з р╢Ер╖Ар╖Бр╖КтАНр╢║р╢п? (р╢Лр╢пр╖П: р╢вр╖КтАНр╢║р╖Щр╖Вр╖Кр╢и р╢▒р╖Тр╢╜р╢░р╖Пр╢╗р╖У, р╢┤р╖Пр╢╗р╖Тр╢╖р╖Эр╢Ьр╖Тр╢Ъ р╖Гр╖Ър╖Ар╖П р╢▒р╖Тр╢║р╖Эр╢вр╖Тр╢нр╢║р╖П, р╢нр╖Пр╢Ър╖Кр╖Вр╢лр╖Тр╢Ъ р╖Ар╖Тр╖Бр╖Ър╖Вр╢ер╢║р╖П)",
        nextStep: 'agentType',
        dataField: 'agentType'
      }
    },
    complete: "р╢┤р╢╗р╖Тр╢┤р╖Цр╢╗р╖Кр╢лр╢║р╖Т! р╢╕р╢╕ р╢Фр╢╢р╢Ьр╖Ъ р╖Гр╖Тр╢║р╢╜р╖Фр╢╕ р╖Ар╖Щр╢▒р╖Кр╢Ър╢╗р╖Ар╖Ур╢╕р╖К р╢нр╖Ьр╢╗р╢нр╖Фр╢╗р╖Ф р╢Ср╢Ър╢нр╖Ф р╢Ър╢╗ р╢Ьр╢нр╖Кр╢нр╖Щр╢╕р╖Т:\n\nЁЯУЛ **р╖Ар╖Щр╢▒р╖Кр╢Ър╢╗р╖Ар╖Ур╢╕р╖К р╖Гр╖Пр╢╗р╖Пр╢Вр╖Бр╢║:**\nтАв р╢пр╖Щр╢┤р╖Пр╢╗р╖Кр╢нр╢╕р╖Ър╢▒р╖Кр╢нр╖Фр╖А: {department}\nтАв р╖Гр╖Ър╖Ар╖Пр╖А: {service}\nтАв р╢▒р╖Тр╢║р╖Эр╢вр╖Тр╢н р╖Ар╢╗р╖Кр╢Ьр╢║: {agentType}\nтАв р╢Ър╖Рр╢╕р╢нр╖Т р╢пр╖Тр╢▒р╢║: {preferredDate}\nтАв р╢Ър╖Рр╢╕р╢нр╖Т р╖Ар╖Ър╢╜р╖Пр╖А: {preferredTime}\nтАв р╢Ер╢╕р╢нр╢╗ р╖Гр╢зр╖Др╢▒р╖К: {additionalNotes}\n\nтЬЕ р╢Фр╢╢р╢Ьр╖Ъ р╖Др╢╕р╖Фр╖Ар╖Ур╢╕р╖К р╖Ар╖Щр╢▒р╖Кр╢Ър╢╗р╖Ар╖Ур╢╕ р╖Гр╢╕р╖Кр╢┤р╖Цр╢╗р╖Кр╢л р╢Ър╖Тр╢╗р╖Ур╢╕р╢з р╢пр╖Рр╢▒р╖К **'р╖Ар╖Щр╢▒р╖Кр╢Ър╢╗р╖Ар╖Ур╢╕р╖К р╖Жр╖Эр╢╗р╢╕р╢║ р╖Ар╖Тр╖Ар╖Шр╢н р╢Ър╢╗р╢▒р╖Кр╢▒'** р╢╢р╖Ьр╢нр╖Кр╢нр╢╕ р╢Ър╖Кр╢╜р╖Тр╢Ър╖К р╢Ър╢╗р╢▒р╖Кр╢▒. р╢Фр╢╢р╢Ьр╖Ъ р╖Гр╖Тр╢║р╢╜р╖Фр╢╕ р╢нр╖Ьр╢╗р╢нр╖Фр╢╗р╖Ф р╖Гр╖Кр╖Ар╢║р╢Вр╢Ър╖КтАНр╢╗р╖Ур╢║р╖А р╢┤р╖Фр╢╗р╖Ар╢▒р╖Ф р╢Зр╢н!",
    authRequired: "р╢Фр╢╢р╢Ьр╖Ъ р╖Ар╖Щр╢▒р╖Кр╢Ър╢╗р╖Ар╖Ур╢╕р╖К р╢нр╖Ьр╢╗р╢нр╖Фр╢╗р╖Ф р╖Гр╖Фр╢╗р╖Рр╢Ър╖Ур╢╕р╢з р╖Гр╖Д р╢Йр╢пр╖Тр╢╗р╖Тр╢║р╢з р╢║р╖Пр╢╕р╢з, р╢Фр╢╢р╢Ьр╖Ъ р╢Ьр╖Тр╢лр╖Фр╢╕р╢з р╢╜р╖Ьр╢Ьр╖К р╖Ар╖Ур╢╕ р╢Ер╖Ар╖Бр╖КтАНр╢║ р╖Ар╖Ъ.",
    error: "р╢Фр╢╢р╢Ьр╖Ъ р╖Ар╖Щр╢▒р╖Кр╢Ър╢╗р╖Ар╖Ур╢╕р╖К р╢Йр╢╜р╖Кр╢╜р╖Ур╢╕ р╖Гр╖Рр╢Ър╖Гр╖Ур╢╕р╖Ър╢пр╖У р╢пр╖Эр╖Вр╢║р╢Ър╖К р╢Зр╢нр╖Т р╖Ар╖Тр╢║."
  },
  ta: {
    steps: {
      start: {
        step: 'start',
        question: "роЙроЩрпНроХро│рпН роЪроирпНродро┐рокрпНрокрпИ роорпБройрпНрокродро┐ро╡рпБ роЪрпЖропрпНроп роиро╛ройрпН роороХро┐ро┤рпНроЪрпНроЪро┐ропроЯрпИроХро┐ро▒рпЗройрпН! роорпБродро▓ро┐ро▓рпН, роОроирпНрод роЕро░роЪро╛роЩрпНроХ родрпБро▒рпИропро┐ройрпН роЙродро╡ро┐ роЙроЩрпНроХро│рпБроХрпНроХрпБ родрпЗро╡рпИ? (роО.роХро╛: роХрпБроЯро┐ропрпЗро▒рпНро▒роорпН, ро╡рогро┐роХ рокродро┐ро╡рпБ, роЪрпБроХро╛родро╛ро░ роЪрпЗро╡рпИроХро│рпН, роХро▓рпНро╡ро┐)",
        nextStep: 'department',
        dataField: 'department'
      },
      department: {
        step: 'department',
        question: "роЕро░рпБроорпИ! роЗрокрпНрокрпЛродрпБ, роЗроирпНрод родрпБро▒рпИропро┐ро▓ро┐ро░рпБроирпНродрпБ роОроирпНрод роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ роЪрпЗро╡рпИ роЙроЩрпНроХро│рпБроХрпНроХрпБ родрпЗро╡рпИ? (роО.роХро╛: роХроЯро╡рпБроЪрпНроЪрпАроЯрпНроЯрпБ рокрпБродрпБрокрпНрокро┐родрпНродро▓рпН, роЙро░ро┐роороорпН ро╡ро┐рогрпНрогрокрпНрокроорпН, роЪро╛ройрпНро▒ро┐родро┤рпН роХрпЛро░ро┐роХрпНроХрпИ)",
        nextStep: 'service',
        dataField: 'service'
      },
      service: {
        step: 'service',
        question: "роЪро░ро┐ропро╛ройродрпБ! роОроирпНрод ро╡роХрпИропро╛рой роЕро░роЪро╛роЩрпНроХ роЕродро┐роХро╛ро░ро┐ропрпИ роЪроирпНродро┐роХрпНроХ ро╡ро┐ро░рпБроорпНрокрпБроХро┐ро▒рпАро░рпНроХро│рпН? (роО.роХро╛: роорпВродрпНрод роЕродро┐роХро╛ро░ро┐, ро╡ро╛роЯро┐роХрпНроХрпИропро╛ро│ро░рпН роЪрпЗро╡рпИ рокро┐ро░родро┐роиро┐родро┐, родрпКро┤ро┐ро▓рпНроирпБроЯрпНрок роиро┐рокрпБрогро░рпН)",
        nextStep: 'agentType',
        dataField: 'agentType'
      }
    },
    complete: "роЪро░ро┐ропро╛ройродрпБ! роЙроЩрпНроХро│рпН роЕройрпИродрпНродрпБ роорпБройрпНрокродро┐ро╡рпБ родроХро╡ро▓рпИропрпБроорпН роиро╛ройрпН роЪрпЗроХро░ро┐родрпНродрпБро╡ро┐роЯрпНроЯрпЗройрпН:\n\nЁЯУЛ **роорпБройрпНрокродро┐ро╡рпБ роЪрпБро░рпБроХрпНроХроорпН:**\nтАв родрпБро▒рпИ: {department}\nтАв роЪрпЗро╡рпИ: {service}\nтАв роорпБроХро╡ро░рпН ро╡роХрпИ: {agentType}\nтАв ро╡ро┐ро░рпБрокрпНрокрооро╛рой родрпЗродро┐: {preferredDate}\nтАв ро╡ро┐ро░рпБрокрпНрокрооро╛рой роирпЗро░роорпН: {preferredTime}\nтАв роХрпВроЯрпБродро▓рпН роХрпБро▒ро┐рокрпНрокрпБроХро│рпН: {additionalNotes}\n\nтЬЕ роЙроЩрпНроХро│рпН роЪроирпНродро┐рокрпНрокрпБ роорпБройрпНрокродро┐ро╡рпИ роорпБроЯро┐роХрпНроХ роХрпАро┤рпЗ роЙро│рпНро│ **'роорпБройрпНрокродро┐ро╡рпБ рокроЯро┐ро╡родрпНродрпИ родро┐ро▒'** рокрпКродрпНродро╛ройрпИ роХро┐ро│ро┐роХрпН роЪрпЖропрпНропро▓ро╛роорпН. роЙроЩрпНроХро│рпН роЕройрпИродрпНродрпБ родроХро╡ро▓рпНроХро│рпБроорпН родро╛ройро╛роХро╡рпЗ роиро┐ро░рокрпНрокрокрпНрокроЯрпБроорпН!",
    authRequired: "роЙроЩрпНроХро│рпН роорпБройрпНрокродро┐ро╡рпБ родроХро╡ро▓рпИ роЪрпЗрооро┐роХрпНроХ рооро▒рпНро▒рпБроорпН родрпКроЯро░, роЙроЩрпНроХро│рпН роХрогроХрпНроХро┐ро▓рпН роЙро│рпНроирпБро┤рпИроп ро╡рпЗрогрпНроЯрпБроорпН.",
    error: "роЙроЩрпНроХро│рпН роорпБройрпНрокродро┐ро╡рпБ роХрпЛро░ро┐роХрпНроХрпИропрпИ роЪрпЖропро▓ро╛роХрпНроХрпБро╡родро┐ро▓рпН рокро┐ро┤рпИ роПро▒рпНрокроЯрпНроЯродрпБ."
  }
};

export async function POST(request: NextRequest) {
  try {
    await connectDB();

    const { message, sessionId, language = 'en' } = await request.json();

    if (!message || !sessionId) {
      return NextResponse.json(
        { error: 'Message and sessionId are required' },
        { status: 400 }
      );
    }

    // Get or create conversation state
    let conversation = await BookingConversation.findOne({ sessionId });
    
    if (!conversation) {
      conversation = new BookingConversation({
        sessionId,
        currentStep: 'start',
        collectedData: {
          department: '',
          service: '',
          agentType: '',
          preferredDate: '',
          preferredTime: '',
          additionalNotes: ''
        },
        conversationHistory: []
      });
    }

    const t = translations[language as keyof typeof translations] || translations.en;
    let response = '';

    // If this is the first message and it's a booking intent, start the flow
    if (conversation.currentStep === 'start') {
      response = t.steps.start.question;
      conversation.currentStep = 'department';
    } else {
      // Process the user's response based on current step
      const currentStepData = t.steps[conversation.currentStep as keyof typeof t.steps];
      
      if (currentStepData && conversation.currentStep !== 'complete') {
        // Save the user's response to the appropriate field
        const dataField = currentStepData.dataField;
        if (dataField && conversation.collectedData) {
          conversation.collectedData[dataField] = message.trim();
        }

        // Move to next step
        if (currentStepData.nextStep === 'complete') {
          // All data collected, show summary
          const summary = t.complete
            .replace('{department}', conversation.collectedData.department || 'Not specified')
            .replace('{service}', conversation.collectedData.service || 'Not specified')
            .replace('{agentType}', conversation.collectedData.agentType || 'Not specified')
            .replace('{preferredDate}', conversation.collectedData.preferredDate || 'Not specified')
            .replace('{preferredTime}', conversation.collectedData.preferredTime || 'Not specified')
            .replace('{additionalNotes}', conversation.collectedData.additionalNotes || 'None');
          
          response = summary;
          conversation.currentStep = 'complete';
        } else {
          // Ask next question
          const nextStep = t.steps[currentStepData.nextStep as keyof typeof t.steps];
          if (nextStep) {
            response = nextStep.question;
            conversation.currentStep = currentStepData.nextStep;
          }
        }
      } else if (conversation.currentStep === 'complete') {
        response = "Your booking information is ready! Please use the 'Open Booking Form' button to complete your appointment.";
      }
    }

    // Add to conversation history
    conversation.conversationHistory.push({
      message,
      response,
      timestamp: new Date()
    });

    // Save conversation state
    await conversation.save();

    // Also save to the booking data collection for form pre-fill
    if (conversation.currentStep === 'complete') {
      try {
        await fetch(`${request.nextUrl.origin}/api/user/booking-data`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            sessionId,
            bookingData: conversation.collectedData
          })
        });
      } catch (error) {
        console.error('Error saving booking data:', error);
      }
    }

    return NextResponse.json({ 
      response,
      currentStep: conversation.currentStep,
      collectedData: conversation.collectedData,
      isComplete: conversation.currentStep === 'complete'
    });

  } catch (error) {
    console.error('Error in booking conversation:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
