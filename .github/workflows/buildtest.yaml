name: Build, Test, and Deploy GovLink Frontend

on:
  push:
    branches:
      - main
      - dev
      - CI-CD
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build_success: ${{ steps.upload_artifact.outcome == 'success' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js with dependency caching
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      # Add error handling and better logging
      - name: Build with OpenNext
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          MAIL_ID: ${{ secrets.MAIL_ID }}
          MAIL_PW: ${{ secrets.MAIL_PW }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}
          NODE_ENV: production
          NEXT_PUBLIC_APP_URL: "https://your-production-url.com"
        run: |
          echo "Starting build process..."
          npm run build:deploy
          echo "Build completed successfully"

      - name: Verify build output exists
        run: |
          echo "Checking if .open-next directory exists..."
          if [ -d ".open-next" ]; then
            echo "✅ .open-next directory found"
            echo "Contents of .open-next:"
            ls -la .open-next/
          else
            echo "❌ .open-next directory not found"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi

      # Only upload artifact if build was successful
      - name: Upload OpenNext build artifact
        id: upload_artifact
        uses: actions/upload-artifact@v4
        with:
          name: open-next-build
          path: .open-next/
          retention-days: 1
          if-no-files-found: error

  deploy-to-aws:
    needs: build
    # More specific condition checking
    if: needs.build.outputs.build_success == 'true' && needs.build.result == 'success' && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/CI-CD')
    runs-on: ubuntu-latest
    permissions:
      id-token: write 
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
          
      - name: Install All Dependencies (including dev for CDK)
        run: npm ci
        
      # Download to the correct path
      - name: Download OpenNext build artifact
        uses: actions/download-artifact@v4
        with:
          name: open-next-build
          path: .open-next/
          
      # Verify the artifact was downloaded correctly
      - name: Verify downloaded artifact
        run: |
          echo "Verifying downloaded artifact..."
          if [ -d ".open-next" ]; then
            echo "✅ .open-next directory found after download"
            echo "Contents:"
            ls -la .open-next/
          else
            echo "❌ .open-next directory not found after download"
            exit 1
          fi
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Install AWS CDK CLI
        run: npm install -g aws-cdk
        
      - name: Bootstrap CDK (if needed)
        run: cdk bootstrap --require-approval never
        
      - name: Deploy with CDK
        run: cdk deploy --all --require-approval never