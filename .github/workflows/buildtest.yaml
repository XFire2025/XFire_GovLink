name: Build, Test, and Deploy GovLink Frontend

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  # JOB 1: A quick check using the standard developer build (runs on all branches)
  Build-Test-Standard:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js with dependency caching
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Run Standard Build Command
        run: npm run build

  # JOB 2: A more rigorous check using the ACTUAL deployment build command (runs on main and dev branches only)
  Build-Test-Deploy:
    needs: Build-Test-Standard
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Node.js with dependency caching
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      - name: Install dependencies
        run: npm ci
      - name: Run Deployment Build for Testing
        run: npm run build:deploy

  # JOB 3: Deploys the application to AWS (runs on main and CI-CD branches only)
  Deploy-to-AWS:
    needs: Build-Test-Deploy
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/CI-CD'
    runs-on: ubuntu-latest
    environment: production # Add environment protection
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: package-lock.json
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Change to your desired AWS region
          role-duration-seconds: 3600
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build with OpenNext
        run: npm run build:deploy
        env:
          NODE_ENV: production
      
      - name: Deploy with OpenNext
        run: npx open-next deploy
        env:
          AWS_REGION: us-east-1
      
      - name: Get CloudFormation Outputs
        id: cf-outputs
        run: |
          STACK_NAME=$(aws cloudformation list-stacks --query "StackSummaries[?contains(StackName, 'govlink') && StackStatus=='CREATE_COMPLETE'].StackName" --output text | head -1)
          if [ ! -z "$STACK_NAME" ]; then
            DOMAIN=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='DomainName'].OutputValue" --output text)
            echo "domain=$DOMAIN" >> $GITHUB_OUTPUT
            echo "stack-name=$STACK_NAME" >> $GITHUB_OUTPUT
          fi
      
      - name: Display Deployment Info
        if: steps.cf-outputs.outputs.domain
        run: |
          echo "🚀 Deployment successful!"
          echo "📍 Application URL: https://${{ steps.cf-outputs.outputs.domain }}"
          echo "📦 CloudFormation Stack: ${{ steps.cf-outputs.outputs.stack-name }}"